<templateSet group="user">
  <template name="class" value="&quot;&quot;&quot;&#10;created at $date$&#10;      time $time$&#10;@author: $author$&#10;&quot;&quot;&quot;&#10;&#10;&#10;class $class$($object$):&#10;   &#10;    def __init__(self):&#10;        $variable$&#10;        " description="generate a class" toReformat="false" toShortenFQNames="true">
    <variable name="date" expression="date()" defaultValue="" alwaysStopAt="false" />
    <variable name="time" expression="time()" defaultValue="" alwaysStopAt="false" />
    <variable name="author" expression="user()" defaultValue="" alwaysStopAt="false" />
    <variable name="class" expression="capitalize(camelCase(fileNameWithoutExtension()))" defaultValue="" alwaysStopAt="false" />
    <variable name="object" expression="" defaultValue="&quot;object&quot;" alwaysStopAt="true" />
    <variable name="variable" expression="" defaultValue="&quot;your code here&quot;" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="test" value="&quot;&quot;&quot;&#10;Created on $date$&#10;      &#10;@author: $author$&#10;&quot;&quot;&quot;&#10;import nose&#10;from mock import patch&#10;&#10;class $class$($object$):&#10;   &#10;    $start$" description="create a new unittest class" toReformat="false" toShortenFQNames="true">
    <variable name="date" expression="date()" defaultValue="" alwaysStopAt="false" />
    <variable name="author" expression="user()" defaultValue="" alwaysStopAt="false" />
    <variable name="class" expression="capitalize(camelCase(fileNameWithoutExtension()))" defaultValue="" alwaysStopAt="false" />
    <variable name="object" expression="" defaultValue="&quot;object&quot;" alwaysStopAt="false" />
    <variable name="start" expression="" defaultValue="&quot;#&lt;--- start here&quot;" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="todo" value="&quot;&quot;&quot;&#10;TODO: $description$&#10;@author: $auth$&#10;@date: $date$&#10;@time: $time$&#10;&quot;&quot;&quot;" shortcut="NONE" description="create a TODO:" toReformat="false" toShortenFQNames="true">
    <variable name="description" expression="" defaultValue="&quot;Please write a description&quot;" alwaysStopAt="true" />
    <variable name="auth" expression="user()" defaultValue="" alwaysStopAt="false" />
    <variable name="date" expression="date()" defaultValue="" alwaysStopAt="false" />
    <variable name="time" expression="time()" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="t2" value="if isinstance($checkTypeFrom$, $type$) and isinstance($checkTypeFrom2$, $type2$):&#10;            $END$&#10;else:&#10;    raise TypeError('$method$(*$type$*, *$type2$*) ' +&#10;                    str(type($checkTypeFrom$)) + ' ' + &#10;                    str(type($checkTypeFrom2$)) + ' one or both parameter are not correct')" description="typeerror" toReformat="false" toShortenFQNames="true">
    <variable name="checkTypeFrom" expression="" defaultValue="&quot;to check&quot;" alwaysStopAt="true" />
    <variable name="type" expression="" defaultValue="&quot;is from type&quot;" alwaysStopAt="true" />
    <variable name="checkTypeFrom2" expression="" defaultValue="&quot;to check&quot;" alwaysStopAt="true" />
    <variable name="type2" expression="" defaultValue="&quot;is from type&quot;" alwaysStopAt="true" />
    <variable name="method" expression="pyFunctionName()" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="t1" value="if isinstance($checkTypeFrom$, $type$):&#10;    $END$&#10;else:&#10;    raise TypeError('$method$(*$type$*) ' +&#10;                    str(type($checkTypeFrom$)) + ' is not from type $type$')" description="" toReformat="false" toShortenFQNames="true">
    <variable name="checkTypeFrom" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="type" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="method" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="header" value="&quot;&quot;&quot;&#10;created at $date$&#10;      time $time$&#10;@author: $author$&#10;&quot;&quot;&quot;" description="create header" toReformat="false" toShortenFQNames="true">
    <variable name="date" expression="date()" defaultValue="" alwaysStopAt="false" />
    <variable name="time" expression="time()" defaultValue="" alwaysStopAt="false" />
    <variable name="author" expression="user()" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="def testreturn" value="def test_$method$_method_return_correct_type_$type$(self):&#10;    self.$assert$(self.$var$.$method$($param$), $type$)&#10;" description="new_test" toReformat="false" toShortenFQNames="true">
    <variable name="method" expression="" defaultValue="&quot;Enter_Method&quot;" alwaysStopAt="true" />
    <variable name="type" expression="" defaultValue="&quot;Enter_Type&quot;" alwaysStopAt="true" />
    <variable name="var" expression="" defaultValue="&quot;Enter_Var/Class&quot;" alwaysStopAt="true" />
    <variable name="param" expression="" defaultValue="&quot;Enter_Param&quot;" alwaysStopAt="true" />
    <variable name="assert" expression="" defaultValue="&quot;Enter_Assert&quot;" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="def testerror" value="def test_$method$_method_return_error_message(self):&#10;    for case in self.test_cases:&#10;        self.$assert$(self.$class$.$method$, case)" description="new_test" toReformat="false" toShortenFQNames="true">
    <variable name="method" expression="" defaultValue="&quot;Enter_Method_Name&quot;" alwaysStopAt="true" />
    <variable name="class" expression="" defaultValue="&quot;Enter_Class/Var&quot;" alwaysStopAt="true" />
    <variable name="assert" expression="" defaultValue="&quot;Enter_Assert&quot;" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
</templateSet>